name: DeepSeek Orchestrator • CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHON_VERSION: "3.10"
      TF_IN_AUTOMATION: "1"
      CI_TFVARS: ${{ secrets.CI_TFVARS }}
      VLLM_ENDPOINT_URL: ${{ secrets.VLLM_ENDPOINT_URL }}

    steps:
      - uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────
      # 1) Cache Python dependencies
      # ─────────────────────────────────────────────────────
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'   # built-in pip caching 3

      - name: Install Python deps
        run: |
          pip install -r requirements.txt
        # pip install will be much faster thanks to the cache 4

      # ─────────────────────────────────────────────────────
      # 2) Cache Terraform plugins & modules
      # ─────────────────────────────────────────────────────
      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-plugins-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-plugins-
      - name: Cache Terraform modules
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-modules-${{ hashFiles('terraform/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-modules-

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # ─────────────────────────────────────────────────────
      # 3) Run tests & Terraform
      # ─────────────────────────────────────────────────────
      - name: Init result dirs
        run: mkdir -p pytest-results/unit pytest-results/plan pytest-results/inference

      - name: Run unit tests
        run: pytest tests/unit --junitxml=pytest-results/unit/results.xml

      - name: Terraform validate
        run: |
          cd terraform
          terraform init -input=false -no-color
          terraform validate -no-color

      - name: Write Terraform vars
        if: ${{ env.CI_TFVARS != '' }}
        run: echo "${CI_TFVARS}" > terraform/ci.tfvars

      - name: Warn if no tfvars
        if: ${{ env.CI_TFVARS == '' }}
        run: echo "::warning ::CI_TFVARS missing – skipping terraform plan."

      - name: Terraform plan
        if: ${{ env.CI_TFVARS != '' }}
        run: |
          cd terraform
          terraform init -input=false -no-color
          terraform plan -var-file=ci.tfvars -input=false -lock=false -no-color \
            | tee ../pytest-results/plan/plan.txt

      - name: Run live inference test
        if: ${{ env.VLLM_ENDPOINT_URL != '' }}
        run: pytest tests/integration/test_inference_endpoint.py \
             --junitxml=pytest-results/inference/results.xml

      - name: Notice no inference URL
        if: ${{ env.VLLM_ENDPOINT_URL == '' }}
        run: echo "::notice ::VLLM_ENDPOINT_URL not set – skipping live inference."

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: pytest-results/**
