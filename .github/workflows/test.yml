name: DeepSeek Orchestrator â€¢ CI

on: push: branches: [ main ] pull_request: workflow_dispatch:       # manual trigger schedule: - cron: "0 3 * * *"    # nightly @ 03:00 UTC (integration/full run)

jobs: tests: runs-on: ubuntu-latest        # swap to self-hosted GPU runner if needed timeout-minutes: 30

env:
  PYTHON_VERSION: "3.10"
  TF_IN_AUTOMATION: "1"       # suppress interactive prompts

steps:
# ------------------------------------------------------------
# 1) Checkout code
# ------------------------------------------------------------
- name: Checkout repository
  uses: actions/checkout@v4

# ------------------------------------------------------------
# 2) Set up Python
# ------------------------------------------------------------
- name: Setup Python ${{ env.PYTHON_VERSION }}
  uses: actions/setup-python@v5
  with:
    python-version: ${{ env.PYTHON_VERSION }}
    cache: 'pip'

# ------------------------------------------------------------
# 3) Install Python dependencies
# ------------------------------------------------------------
- name: Install Python dependencies
  run: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt

# ------------------------------------------------------------
# 4) Install Terraform (for integration plan test)
# ------------------------------------------------------------
- name: Install Terraform
  uses: hashicorp/setup-terraform@v3
  with:
    terraform_version: 1.6.6

# ------------------------------------------------------------
# 5) Prepare results directory
# ------------------------------------------------------------
- name: Initialize test output folders
  run: mkdir -p pytest-results/unit pytest-results/plan pytest-results/inference

# ------------------------------------------------------------
# 6) Run unit tests
# ------------------------------------------------------------
- name: Run unit tests
  run: pytest tests/unit --junitxml=pytest-results/unit/results.xml
  env:
    PYTHONWARNINGS: 'ignore::UserWarning'

# ------------------------------------------------------------
# 7) Run integration plan test (no AWS creds needed)
# ------------------------------------------------------------
- name: Run terraform plan test
  run: pytest tests/integration/test_terraform_plan.py --junitxml=pytest-results/plan/results.xml

# ------------------------------------------------------------
# 8) Run live inference integration (optional)
# ------------------------------------------------------------
- name: Run live inference integration
  if: env.VLLM_ENDPOINT_URL != ''
  run: pytest tests/integration/test_inference_endpoint.py --junitxml=pytest-results/inference/results.xml

# ------------------------------------------------------------
# 9) Upload test results
# ------------------------------------------------------------
- name: Publish test results
  if: always()
  uses: actions/upload-artifact@v4
  with:
    name: pytest-results
    path: pytest-results/**/results.xml

